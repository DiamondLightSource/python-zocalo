[tool.poetry]
name = "zocalo"
version = "1.2.0"
description = "Infrastructure components for automated data processing at Diamond Light Source"
authors = ["Nicholas Devenish <ndevenish@gmail.com>"]
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.10"
pyyaml = "^6.0"
graypy = "^2.0"
marshmallow = "^3.19"
requests = "^2.31"
pydantic = "^2"
workflows = ">=3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
requests-mock = "^1.12.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^6"
sphinx-rtd-theme = "^1.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.urls]
Bug-Tracker = "https://github.com/DiamondLightSource/python-zocalo/issues"
Changelog = "https://github.com/DiamondLightSource/python-zocalo/blob/main/HISTORY.rst"
Documentation = "https://github.com/DiamondLightSource/python-zocalo"
Download = "https://github.com/DiamondLightSource/python-zocalo/releases"
GitHub = "https://github.com/DiamondLightSource/python-zocalo"

[tool.poetry.scripts]
"zocalo.configure_rabbitmq" = "zocalo.cli.configure_rabbitmq:run"
"zocalo.dlq_check" = "zocalo.cli.dlq_check:run"
"zocalo.dlq_purge" = "zocalo.cli.dlq_purge:run"
"zocalo.dlq_reinject" = "zocalo.cli.dlq_reinject:run"
"zocalo.go" = "zocalo.cli.go:run"
"zocalo.pickup" = "zocalo.cli.pickup:run"
"zocalo.queue_drain" = "zocalo.cli.queue_drain:run"
"zocalo.service" = "zocalo.service:start_service"
"zocalo.shutdown" = "zocalo.cli.shutdown:run"
"zocalo.wrap" = "zocalo.cli.wrap:run"

[tool.poetry.plugins]
"libtbx.precommit" = { zocalo = "zocalo" }
"zocalo.wrappers" = { dummy = "zocalo.wrapper:DummyWrapper" }

[tool.poetry.plugins."libtbx.dispatcher.script"]
"zocalo.configure_rabbitmq" = "zocalo.configure_rabbitmq"
"zocalo.dlq_check" = "zocalo.dlq_check"
"zocalo.dlq_purge" = "zocalo.dlq_purge"
"zocalo.dlq_reinject" = "zocalo.dlq_reinject"
"zocalo.go" = "zocalo.go"
"zocalo.queue_drain" = "zocalo.queue_drain"
"zocalo.service" = "zocalo.service"
"zocalo.shutdown" = "zocalo.shutdown"
"zocalo.wrap" = "zocalo.wrap"

[tool.poetry.plugins."workflows.services"]
Dispatcher = "zocalo.service.dispatcher:Dispatcher"
JSONLines = "zocalo.service.jsonlines:JSONLines"
Mailer = "zocalo.service.mailer:Mailer"
Schlockmeister = "zocalo.service.schlockmeister:Schlockmeister"

[tool.poetry.plugins."zocalo.configuration.plugins"]
graylog = "zocalo.configuration.plugin_graylog:Graylog"
jmx = "zocalo.configuration.plugin_jmx:JMX"
logging = "zocalo.configuration.plugin_logging:Logging"
rabbitmqapi = "zocalo.configuration.plugin_rabbitmqapi:RabbitAPI"
slurm = "zocalo.configuration.plugin_slurm:Slurm"
iris = "zocalo.configuration.plugin_slurm:Slurm"
smtp = "zocalo.configuration.plugin_smtp:SMTP"
storage = "zocalo.configuration.plugin_storage:Storage"

[tool.pytest.ini_options]
required_plugins = "pytest-mock requests-mock"
testpaths = ["tests"]

[tool.ruff.lint]
ignore = ["E501", "E741"]
select = ["C4", "E", "F", "W", "I"]
unfixable = ["F841"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"src/zocalo/util/slurm/models.py" = ["W"]

[tool.mypy]
mypy_path = "src"

[[tool.mypy.overrides]]
module = ["graypy", "graypy.handler"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["zocalo.util.slurm.models"]
ignore_errors = true

[tool.bumpversion]
current_version = "1.2.0"
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = 'src/zocalo/__init__.py'
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
