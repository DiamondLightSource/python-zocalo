# generated by datamodel-codegen:
#   filename:  slurm-rest.yaml
#   timestamp: 2024-03-12T17:33:00+00:00

from __future__ import annotations

from enum import Enum
from typing import List

from pydantic import BaseModel, Field


class Flag(Enum):
    DELETED = "DELETED"


class AccountShort(BaseModel):
    description: str | None = None
    """
    An arbitrary string describing an account
    """
    organization: str | None = None
    """
    Organization to which the account belongs
    """


class Allocated(BaseModel):
    seconds: int | None = None


class Default(BaseModel):
    qos: str | None = None


class Fairshare(BaseModel):
    factor: float | None = None
    """
    fairshare factor
    """
    level: float | None = None
    """
    fairshare factor at this level. stored on an assoc as a long double, but that is not needed for display in sshare
    """


class TypeEnum(Enum):
    USER = "USER"
    ASSOCIATION = "ASSOCIATION"


class AssocShort(BaseModel):
    account: str | None = None
    """
    Association account (if assigned)
    """
    cluster: str | None = None
    """
    Association cluster (if assigned)
    """
    id: int | None = None
    """
    Numeric Association ID (if known)
    """
    partition: str | None = None
    """
    Association partition (if assigned)
    """
    user: str
    """
    Assocation user (if assigned)
    """


class AssocShortList(BaseModel):
    __root__: list[AssocShort]


class BfExitFields(BaseModel):
    bf_max_job_start: int | None = None
    bf_max_job_test: int | None = None
    bf_max_time: int | None = None
    bf_node_space_size: int | None = None
    end_job_queue: int | None = None
    state_changed: int | None = None


class Associations(BaseModel):
    root: AssocShort | None = None


class Controller(BaseModel):
    host: str | None = None
    port: int | None = None


class Flag2(Enum):
    REGISTERING = "REGISTERING"
    MULTIPLE_SLURMD = "MULTIPLE_SLURMD"
    FRONT_END = "FRONT_END"
    CRAY_NATIVE = "CRAY_NATIVE"
    FEDERATION = "FEDERATION"
    EXTERNAL = "EXTERNAL"


class ControllerPing(BaseModel):
    hostname: str | None = None
    latency: int | None = None
    mode: str | None = None
    pinged: str | None = None


class ControllerPingArray(BaseModel):
    __root__: list[ControllerPing]


class Coord(BaseModel):
    direct: bool | None = None
    name: str


class CoordList(BaseModel):
    __root__: list[Coord]


class Flag3(Enum):
    WILD_MINUTE = "WILD_MINUTE"
    WILD_HOUR = "WILD_HOUR"
    WILD_DAY_OF_MONTH = "WILD_DAY_OF_MONTH"
    WILD_MONTH = "WILD_MONTH"
    WILD_DAY_OF_WEEK = "WILD_DAY_OF_WEEK"


class Line(BaseModel):
    end: int | None = None
    start: int | None = None


class CronEntry(BaseModel):
    command: str | None = None
    day_of_month: str | None = None
    day_of_week: str | None = None
    flags: list[Flag3] | None = None
    hour: str | None = None
    line: Line | None = None
    minute: str | None = None
    month: str | None = None
    specification: str | None = None


class CsvString(BaseModel):
    __root__: list[str]


class Float64NoVal(BaseModel):
    """
    64 bit floating point number with flags
    """

    infinite: bool | None = False
    """
    True if number has been set to infinite. "set" and "number" will be ignored.
    """
    number: float | None = None
    """
    If set is True the number will be set with value. Otherwise ignore number contents.
    """
    set: bool | None = False
    """
    True if number has been set. False if number is unset
    """


class Hostlist(BaseModel):
    __root__: list[str]


class HostlistString(BaseModel):
    __root__: list[str]


class Time(BaseModel):
    time_end: int | None = None
    time_start: int | None = None


class Instance(BaseModel):
    cluster: str | None = None
    extra: str | None = None
    instance_id: str | None = None
    instance_type: str | None = None
    node_name: str | None = None
    time: Time | None = None


class InstanceList(BaseModel):
    __root__: list[Instance]


class Running(BaseModel):
    tasks: int | None = None


class Max1(BaseModel):
    running: Running | None = None


class Limits(BaseModel):
    max: Max1 | None = None


class Comment(BaseModel):
    administrator: str | None = None
    job: str | None = None
    system: str | None = None


class Flag4(Enum):
    NONE = "NONE"
    CLEAR_SCHEDULING = "CLEAR_SCHEDULING"
    NOT_SET = "NOT_SET"
    STARTED_ON_SUBMIT = "STARTED_ON_SUBMIT"
    STARTED_ON_SCHEDULE = "STARTED_ON_SCHEDULE"
    STARTED_ON_BACKFILL = "STARTED_ON_BACKFILL"
    START_RECEIVED = "START_RECEIVED"


class Mcs(BaseModel):
    label: str | None = None


class Reservation(BaseModel):
    id: int | None = None
    name: str | None = None


class CurrentEnum(Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    SUSPENDED = "SUSPENDED"
    COMPLETED = "COMPLETED"
    CANCELLED = "CANCELLED"
    FAILED = "FAILED"
    TIMEOUT = "TIMEOUT"
    NODE_FAIL = "NODE_FAIL"
    PREEMPTED = "PREEMPTED"
    BOOT_FAIL = "BOOT_FAIL"
    DEADLINE = "DEADLINE"
    OUT_OF_MEMORY = "OUT_OF_MEMORY"
    LAUNCH_FAILED = "LAUNCH_FAILED"
    UPDATE_DB = "UPDATE_DB"
    REQUEUED = "REQUEUED"
    REQUEUE_HOLD = "REQUEUE_HOLD"
    SPECIAL_EXIT = "SPECIAL_EXIT"
    RESIZING = "RESIZING"
    CONFIGURING = "CONFIGURING"
    COMPLETING = "COMPLETING"
    STOPPED = "STOPPED"
    RECONFIG_FAIL = "RECONFIG_FAIL"
    POWER_UP_NODE = "POWER_UP_NODE"
    REVOKED = "REVOKED"
    REQUEUE_FED = "REQUEUE_FED"
    RESV_DEL_HOLD = "RESV_DEL_HOLD"
    SIGNALING = "SIGNALING"
    STAGE_OUT = "STAGE_OUT"


class State(BaseModel):
    current: list[CurrentEnum] | None = None
    reason: str | None = None


class System(BaseModel):
    microseconds: int | None = None
    seconds: int | None = None


class Total(BaseModel):
    microseconds: int | None = None
    seconds: int | None = None


class User(BaseModel):
    microseconds: int | None = None
    seconds: int | None = None


class JobArrayResponseMsgEntry(BaseModel):
    error: str | None = None
    """
    Verbose update status or error
    """
    error_code: int | None = None
    """
    Verbose update status or error
    """
    job_id: int | None = None
    """
    JobId for updated Job
    """
    step_id: str | None = None
    """
    StepId for updated Job
    """
    why: str | None = None
    """
    Update response message
    """


class CpuBindingFlag(Enum):
    CPU_BIND_TO_THREADS = "CPU_BIND_TO_THREADS"
    CPU_BIND_TO_CORES = "CPU_BIND_TO_CORES"
    CPU_BIND_TO_SOCKETS = "CPU_BIND_TO_SOCKETS"
    CPU_BIND_TO_LDOMS = "CPU_BIND_TO_LDOMS"
    CPU_BIND_NONE = "CPU_BIND_NONE"
    CPU_BIND_RANK = "CPU_BIND_RANK"
    CPU_BIND_MAP = "CPU_BIND_MAP"
    CPU_BIND_MASK = "CPU_BIND_MASK"
    CPU_BIND_LDRANK = "CPU_BIND_LDRANK"
    CPU_BIND_LDMAP = "CPU_BIND_LDMAP"
    CPU_BIND_LDMASK = "CPU_BIND_LDMASK"
    VERBOSE = "VERBOSE"
    CPU_BIND_ONE_THREAD_PER_CORE = "CPU_BIND_ONE_THREAD_PER_CORE"


class ExclusiveEnum(Enum):
    true = "true"
    false = "false"
    user = "user"
    mcs = "mcs"


class Flag5(Enum):
    KILL_INVALID_DEPENDENCY = "KILL_INVALID_DEPENDENCY"
    NO_KILL_INVALID_DEPENDENCY = "NO_KILL_INVALID_DEPENDENCY"
    HAS_STATE_DIRECTORY = "HAS_STATE_DIRECTORY"
    TESTING_BACKFILL = "TESTING_BACKFILL"
    GRES_BINDING_ENFORCED = "GRES_BINDING_ENFORCED"
    TEST_NOW_ONLY = "TEST_NOW_ONLY"
    SEND_JOB_ENVIRONMENT = "SEND_JOB_ENVIRONMENT"
    SPREAD_JOB = "SPREAD_JOB"
    PREFER_MINIMUM_NODE_COUNT = "PREFER_MINIMUM_NODE_COUNT"
    JOB_KILL_HURRY = "JOB_KILL_HURRY"
    SKIP_TRES_STRING_ACCOUNTING = "SKIP_TRES_STRING_ACCOUNTING"
    SIBLING_CLUSTER_UPDATE_ONLY = "SIBLING_CLUSTER_UPDATE_ONLY"
    HETEROGENEOUS_JOB = "HETEROGENEOUS_JOB"
    EXACT_TASK_COUNT_REQUESTED = "EXACT_TASK_COUNT_REQUESTED"
    EXACT_CPU_COUNT_REQUESTED = "EXACT_CPU_COUNT_REQUESTED"
    TESTING_WHOLE_NODE_BACKFILL = "TESTING_WHOLE_NODE_BACKFILL"
    TOP_PRIORITY_JOB = "TOP_PRIORITY_JOB"
    ACCRUE_COUNT_CLEARED = "ACCRUE_COUNT_CLEARED"
    GRED_BINDING_DISABLED = "GRED_BINDING_DISABLED"
    JOB_WAS_RUNNING = "JOB_WAS_RUNNING"
    JOB_ACCRUE_TIME_RESET = "JOB_ACCRUE_TIME_RESET"
    CRON_JOB = "CRON_JOB"
    EXACT_MEMORY_REQUESTED = "EXACT_MEMORY_REQUESTED"
    USING_DEFAULT_ACCOUNT = "USING_DEFAULT_ACCOUNT"
    USING_DEFAULT_PARTITION = "USING_DEFAULT_PARTITION"
    USING_DEFAULT_QOS = "USING_DEFAULT_QOS"
    USING_DEFAULT_WCKEY = "USING_DEFAULT_WCKEY"
    DEPENDENT = "DEPENDENT"
    MAGNETIC = "MAGNETIC"
    PARTITION_ASSIGNED = "PARTITION_ASSIGNED"
    BACKFILL_ATTEMPTED = "BACKFILL_ATTEMPTED"
    SCHEDULING_ATTEMPTED = "SCHEDULING_ATTEMPTED"
    SAVE_BATCH_SCRIPT = "SAVE_BATCH_SCRIPT"


class KillWarningFlag(Enum):
    BATCH_JOB = "BATCH_JOB"
    ARRAY_TASK = "ARRAY_TASK"
    FULL_STEPS_ONLY = "FULL_STEPS_ONLY"
    FULL_JOB = "FULL_JOB"
    FEDERATION_REQUEUE = "FEDERATION_REQUEUE"
    HURRY = "HURRY"
    OUT_OF_MEMORY = "OUT_OF_MEMORY"
    NO_SIBLING_JOBS = "NO_SIBLING_JOBS"
    RESERVATION_JOB = "RESERVATION_JOB"
    WARNING_SENT = "WARNING_SENT"


class MailTypeEnum(Enum):
    BEGIN = "BEGIN"
    END = "END"
    FAIL = "FAIL"
    REQUEUE = "REQUEUE"
    TIME_100_ = "TIME=100%"
    TIME_90_ = "TIME=90%"
    TIME_80_ = "TIME=80%"
    TIME_50_ = "TIME=50%"
    STAGE_OUT = "STAGE_OUT"
    ARRAY_TASKS = "ARRAY_TASKS"
    INVALID_DEPENDENCY = "INVALID_DEPENDENCY"


class MemoryBindingTypeEnum(Enum):
    NONE = "NONE"
    RANK = "RANK"
    MAP = "MAP"
    MASK = "MASK"
    LOCAL = "LOCAL"
    VERBOSE = "VERBOSE"
    SORT = "SORT"
    PREFER = "PREFER"


class OpenModeEnum(Enum):
    APPEND = "APPEND"
    TRUNCATE = "TRUNCATE"


class PowerFlag(Enum):
    EQUAL_POWER = "EQUAL_POWER"


class ProfileEnum(Enum):
    NOT_SET = "NOT_SET"
    NONE = "NONE"
    ENERGY = "ENERGY"
    LUSTRE = "LUSTRE"
    NETWORK = "NETWORK"
    TASK = "TASK"


class SharedEnum(Enum):
    none = "none"
    oversubscribe = "oversubscribe"
    user = "user"
    mcs = "mcs"


class X11Enum(Enum):
    FORWARD_ALL_NODES = "FORWARD_ALL_NODES"
    BATCH_NODE = "BATCH_NODE"
    FIRST_NODE = "FIRST_NODE"
    LAST_NODE = "LAST_NODE"


class JobStateEnum(Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    SUSPENDED = "SUSPENDED"
    COMPLETED = "COMPLETED"
    CANCELLED = "CANCELLED"
    FAILED = "FAILED"
    TIMEOUT = "TIMEOUT"
    NODE_FAIL = "NODE_FAIL"
    PREEMPTED = "PREEMPTED"
    BOOT_FAIL = "BOOT_FAIL"
    DEADLINE = "DEADLINE"
    OUT_OF_MEMORY = "OUT_OF_MEMORY"
    LAUNCH_FAILED = "LAUNCH_FAILED"
    UPDATE_DB = "UPDATE_DB"
    REQUEUED = "REQUEUED"
    REQUEUE_HOLD = "REQUEUE_HOLD"
    SPECIAL_EXIT = "SPECIAL_EXIT"
    RESIZING = "RESIZING"
    CONFIGURING = "CONFIGURING"
    COMPLETING = "COMPLETING"
    STOPPED = "STOPPED"
    RECONFIG_FAIL = "RECONFIG_FAIL"
    POWER_UP_NODE = "POWER_UP_NODE"
    REVOKED = "REVOKED"
    REQUEUE_FED = "REQUEUE_FED"
    RESV_DEL_HOLD = "RESV_DEL_HOLD"
    SIGNALING = "SIGNALING"
    STAGE_OUT = "STAGE_OUT"


class Flag7(Enum):
    EQUAL_POWER = "EQUAL_POWER"


class Power(BaseModel):
    flags: list[Flag7] | None = None


class ShowFlag(Enum):
    ALL = "ALL"
    DETAIL = "DETAIL"
    MIXED = "MIXED"
    LOCAL = "LOCAL"
    SIBLING = "SIBLING"
    FEDERATION = "FEDERATION"
    FUTURE = "FUTURE"


class JobInfoGresDetail(BaseModel):
    __root__: list[str]


class JobResNodes(BaseModel):
    """
    job node resources
    """

    __root__: list
    """
    job node resources
    """


class JobSubmitResponseMsg(BaseModel):
    error: str | None = None
    error_code: int | None = None
    job_id: int | None = None
    job_submit_user_msg: str | None = None
    step_id: str | None = None


class License(BaseModel):
    Free: int | None = None
    LastConsumed: int | None = None
    LastDeficit: int | None = None
    LastUpdate: int | None = None
    LicenseName: str | None = None
    Remote: bool | None = None
    Reserved: int | None = None
    Total: int | None = None
    Used: int | None = None


class Licenses(BaseModel):
    __root__: list[License]


class NextStateAfterRebootEnum(Enum):
    INVALID = "INVALID"
    UNKNOWN = "UNKNOWN"
    DOWN = "DOWN"
    IDLE = "IDLE"
    ALLOCATED = "ALLOCATED"
    ERROR = "ERROR"
    MIXED = "MIXED"
    FUTURE = "FUTURE"
    PERFCTRS = "PERFCTRS"
    RESERVED = "RESERVED"
    UNDRAIN = "UNDRAIN"
    CLOUD = "CLOUD"
    RESUME = "RESUME"
    DRAIN = "DRAIN"
    COMPLETING = "COMPLETING"
    NOT_RESPONDING = "NOT_RESPONDING"
    POWERED_DOWN = "POWERED_DOWN"
    FAIL = "FAIL"
    POWERING_UP = "POWERING_UP"
    MAINTENANCE = "MAINTENANCE"
    REBOOT_REQUESTED = "REBOOT_REQUESTED"
    REBOOT_CANCELED = "REBOOT_CANCELED"
    POWERING_DOWN = "POWERING_DOWN"
    DYNAMIC_FUTURE = "DYNAMIC_FUTURE"
    REBOOT_ISSUED = "REBOOT_ISSUED"
    PLANNED = "PLANNED"
    INVALID_REG = "INVALID_REG"
    POWER_DOWN = "POWER_DOWN"
    POWER_UP = "POWER_UP"
    POWER_DRAIN = "POWER_DRAIN"
    DYNAMIC_NORM = "DYNAMIC_NORM"


class StateEnum(Enum):
    INVALID = "INVALID"
    UNKNOWN = "UNKNOWN"
    DOWN = "DOWN"
    IDLE = "IDLE"
    ALLOCATED = "ALLOCATED"
    ERROR = "ERROR"
    MIXED = "MIXED"
    FUTURE = "FUTURE"
    PERFCTRS = "PERFCTRS"
    RESERVED = "RESERVED"
    UNDRAIN = "UNDRAIN"
    CLOUD = "CLOUD"
    RESUME = "RESUME"
    DRAIN = "DRAIN"
    COMPLETING = "COMPLETING"
    NOT_RESPONDING = "NOT_RESPONDING"
    POWERED_DOWN = "POWERED_DOWN"
    FAIL = "FAIL"
    POWERING_UP = "POWERING_UP"
    MAINTENANCE = "MAINTENANCE"
    REBOOT_REQUESTED = "REBOOT_REQUESTED"
    REBOOT_CANCELED = "REBOOT_CANCELED"
    POWERING_DOWN = "POWERING_DOWN"
    DYNAMIC_FUTURE = "DYNAMIC_FUTURE"
    REBOOT_ISSUED = "REBOOT_ISSUED"
    PLANNED = "PLANNED"
    INVALID_REG = "INVALID_REG"
    POWER_DOWN = "POWER_DOWN"
    POWER_UP = "POWER_UP"
    POWER_DRAIN = "POWER_DRAIN"
    DYNAMIC_NORM = "DYNAMIC_NORM"


class OpenapiError(BaseModel):
    description: str | None = None
    """
    Long form error description
    """
    error: str | None = None
    """
    Short form error description
    """
    error_number: int | None = None
    """
    Slurm numeric error identifier
    """
    source: str | None = None
    """
    Source of error or where error was first detected
    """


class OpenapiErrors(BaseModel):
    __root__: list[OpenapiError]


class Client(BaseModel):
    group: str | None = None
    """
    Client group (if known)
    """
    source: str | None = None
    """
    Client source description
    """
    user: str | None = None
    """
    Client user (if known)
    """


class Plugin(BaseModel):
    accounting_storage: str | None = None
    """
    Slurm accounting plugin
    """
    data_parser: str | None = None
    """
    Slurm data_parser plugin
    """
    name: str | None = None
    """
    Slurm plugin name (if applicable)
    """
    type: str | None = None
    """
    Slurm plugin type (if applicable)
    """


class Version(BaseModel):
    major: str | None = None
    """
    Slurm release major version
    """
    micro: str | None = None
    """
    Slurm release micro version
    """
    minor: str | None = None
    """
    Slurm release minor version
    """


class Slurm(BaseModel):
    cluster: str | None = None
    """
    Slurm cluster name
    """
    release: str | None = None
    """
    Slurm release string
    """
    version: Version | None = None


class OpenapiWarning(BaseModel):
    description: str | None = None
    """
    Long form warning description
    """
    source: str | None = None
    """
    Source of warning or where warning was first detected
    """


class OpenapiWarnings(BaseModel):
    __root__: list[OpenapiWarning]


class Accounts(BaseModel):
    allowed: str | None = None
    deny: str | None = None


class Cpus(BaseModel):
    task_binding: int | None = None
    total: int | None = None


class Groups(BaseModel):
    allowed: str | None = None


class Flag8(Enum):
    force = "force"


class Oversubscribe(BaseModel):
    flags: list[Flag8] | None = None
    jobs: int | None = None


class Minimums(BaseModel):
    nodes: int | None = None


class Nodes1(BaseModel):
    allowed_allocation: str | None = None
    configured: str | None = None
    total: int | None = None


class StateEnum1(Enum):
    INACTIVE = "INACTIVE"
    UNKNOWN = "UNKNOWN"
    UP = "UP"
    DOWN = "DOWN"
    DRAIN = "DRAIN"


class Partition(BaseModel):
    state: list[StateEnum1] | None = None


class Priority(BaseModel):
    job_factor: int | None = None
    tier: int | None = None


class Qos(BaseModel):
    allowed: str | None = None
    assigned: str | None = None
    deny: str | None = None


class Tres4(BaseModel):
    billing_weights: str | None = None
    configured: str | None = None


class StatusEnum(Enum):
    INVALID = "INVALID"
    PENDING = "PENDING"
    SUCCESS = "SUCCESS"
    ERROR = "ERROR"
    SIGNALED = "SIGNALED"
    CORE_DUMPED = "CORE_DUMPED"


class Flag9(Enum):
    NOT_SET = "NOT_SET"
    ADD = "ADD"
    REMOVE = "REMOVE"
    PARTITION_MINIMUM_NODE = "PARTITION_MINIMUM_NODE"
    PARTITION_MAXIMUM_NODE = "PARTITION_MAXIMUM_NODE"
    PARTITION_TIME_LIMIT = "PARTITION_TIME_LIMIT"
    ENFORCE_USAGE_THRESHOLD = "ENFORCE_USAGE_THRESHOLD"
    NO_RESERVE = "NO_RESERVE"
    REQUIRED_RESERVATION = "REQUIRED_RESERVATION"
    DENY_LIMIT = "DENY_LIMIT"
    OVERRIDE_PARTITION_QOS = "OVERRIDE_PARTITION_QOS"
    NO_DECAY = "NO_DECAY"
    USAGE_FACTOR_SAFE = "USAGE_FACTOR_SAFE"
    RELATIVE = "RELATIVE"


class ModeEnum(Enum):
    DISABLED = "DISABLED"
    SUSPEND = "SUSPEND"
    REQUEUE = "REQUEUE"
    CANCEL = "CANCEL"
    GANG = "GANG"


class QosPreemptList(BaseModel):
    __root__: list[str]


class QosStringIdList(BaseModel):
    """
    List of QOS names
    """

    __root__: list[str]
    """
    List of QOS names
    """


class ReservationCoreSpec(BaseModel):
    core: str | None = None
    node: str | None = None


class Flag10(Enum):
    MAINT = "MAINT"
    NO_MAINT = "NO_MAINT"
    DAILY = "DAILY"
    NO_DAILY = "NO_DAILY"
    WEEKLY = "WEEKLY"
    NO_WEEKLY = "NO_WEEKLY"
    IGNORE_JOBS = "IGNORE_JOBS"
    NO_IGNORE_JOBS = "NO_IGNORE_JOBS"
    ANY_NODES = "ANY_NODES"
    STATIC = "STATIC"
    NO_STATIC = "NO_STATIC"
    PART_NODES = "PART_NODES"
    NO_PART_NODES = "NO_PART_NODES"
    OVERLAP = "OVERLAP"
    SPEC_NODES = "SPEC_NODES"
    TIME_FLOAT = "TIME_FLOAT"
    REPLACE = "REPLACE"
    ALL_NODES = "ALL_NODES"
    PURGE_COMP = "PURGE_COMP"
    WEEKDAY = "WEEKDAY"
    NO_WEEKDAY = "NO_WEEKDAY"
    WEEKEND = "WEEKEND"
    NO_WEEKEND = "NO_WEEKEND"
    FLEX = "FLEX"
    NO_FLEX = "NO_FLEX"
    DURATION_PLUS = "DURATION_PLUS"
    DURATION_MINUS = "DURATION_MINUS"
    NO_HOLD_JOBS_AFTER_END = "NO_HOLD_JOBS_AFTER_END"
    NO_PURGE_COMP = "NO_PURGE_COMP"
    MAGNETIC = "MAGNETIC"
    SKIP = "SKIP"
    HOURLY = "HOURLY"
    NO_HOURLY = "NO_HOURLY"
    REOCCURRING = "REOCCURRING"


class ReservationInfoCoreSpec(BaseModel):
    __root__: list[ReservationCoreSpec]


class Type(Enum):
    """
    type
    """

    internal = "internal"
    user = "user"
    unknown = "unknown"


class RollupStat(BaseModel):
    """
    recorded rollup statistics
    """

    last_run: int | None = Field(None, alias="last run")
    """
    Last time rollup ran (UNIX timestamp)
    """
    max_cycle: int | None = None
    """
    longest rollup time (seconds)
    """
    mean_cycles: int | None = None
    """
    average time for rollup (seconds)
    """
    total_cycles: int | None = None
    """
    number of rollups since last_run
    """
    total_time: int | None = None
    """
    total time spent doing rollups (seconds)
    """
    type: Type | None = None
    """
    type
    """


class RollupStats(BaseModel):
    """
    list of recorded rollup statistics
    """

    __root__: list[RollupStat]
    """
    list of recorded rollup statistics
    """


class ScheduleExitFields(BaseModel):
    default_queue_depth: int | None = None
    end_job_queue: int | None = None
    licenses: int | None = None
    max_job_start: int | None = None
    max_rpc_cnt: int | None = None
    max_sched_time: int | None = None


class SharesFloat128Tres(BaseModel):
    name: str | None = None
    """
    TRES name
    """
    value: float | None = None
    """
    TRES value
    """


class SharesFloat128TresList(BaseModel):
    __root__: list[SharesFloat128Tres]


class StatsMsgRpcsByTypeItem(BaseModel):
    """
    RPC
    """

    average_time: int | None = None
    """
    Average time spent processing RPC in seconds
    """
    count: int | None = None
    """
    Number of RPCs received
    """
    message_type: str | None = None
    """
    Message type as string
    """
    total_time: int | None = None
    """
    Total time spent processing RPC in seconds
    """
    type_id: int | None = None
    """
    Message type as integer
    """


class StatsMsgRpcsByType(BaseModel):
    """
    RPCs by message type
    """

    __root__: list[StatsMsgRpcsByTypeItem]
    """
    RPCs by message type
    """


class StatsMsgRpcsByUserItem(BaseModel):
    """
    user
    """

    average_time: int | None = None
    """
    Average time spent processing RPC in seconds
    """
    count: int | None = None
    """
    Number of RPCs received
    """
    total_time: int | None = None
    """
    Total time spent processing RPC in seconds
    """
    user: str | None = None
    """
    user name
    """
    user_id: int | None = None
    """
    user id (numeric)
    """


class StatsMsgRpcsByUser(BaseModel):
    """
    RPCs by user
    """

    __root__: list[StatsMsgRpcsByUserItem]
    """
    RPCs by user
    """


class Time2(BaseModel):
    average: int | None = None
    total: int | None = None


class StatsRpc(BaseModel):
    count: int | None = None
    rpc: str | None = None
    time: Time2 | None = None


class StatsRpcList(BaseModel):
    __root__: list[StatsRpc]


class StatsUser(BaseModel):
    count: int | None = None
    time: Time2 | None = None
    user: str | None = None


class StatsUserList(BaseModel):
    __root__: list[StatsUser]


class Nodes2(BaseModel):
    count: int | None = None
    list: Hostlist | None = None
    range: str | None = None


class StateEnum2(Enum):
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    SUSPENDED = "SUSPENDED"
    COMPLETED = "COMPLETED"
    CANCELLED = "CANCELLED"
    FAILED = "FAILED"
    TIMEOUT = "TIMEOUT"
    NODE_FAIL = "NODE_FAIL"
    PREEMPTED = "PREEMPTED"
    BOOT_FAIL = "BOOT_FAIL"
    DEADLINE = "DEADLINE"
    OUT_OF_MEMORY = "OUT_OF_MEMORY"
    LAUNCH_FAILED = "LAUNCH_FAILED"
    UPDATE_DB = "UPDATE_DB"
    REQUEUED = "REQUEUED"
    REQUEUE_HOLD = "REQUEUE_HOLD"
    SPECIAL_EXIT = "SPECIAL_EXIT"
    RESIZING = "RESIZING"
    CONFIGURING = "CONFIGURING"
    COMPLETING = "COMPLETING"
    STOPPED = "STOPPED"
    RECONFIG_FAIL = "RECONFIG_FAIL"
    POWER_UP_NODE = "POWER_UP_NODE"
    REVOKED = "REVOKED"
    REQUEUE_FED = "REQUEUE_FED"
    RESV_DEL_HOLD = "RESV_DEL_HOLD"
    SIGNALING = "SIGNALING"
    STAGE_OUT = "STAGE_OUT"


class CPU1(BaseModel):
    actual_frequency: int | None = None


class Step1(BaseModel):
    id: str | None = None
    """
    Slurm Job StepId
    """
    name: str | None = None


class Task(BaseModel):
    distribution: str | None = None


class Tasks(BaseModel):
    count: int | None = None


class StringArray(BaseModel):
    __root__: list[str]


class StringList(BaseModel):
    __root__: list[str]


class Tres(BaseModel):
    count: int | None = None
    id: int | None = None
    name: str | None = None
    type: str


class TresList(BaseModel):
    __root__: list[Tres]


class Uint16NoVal(BaseModel):
    """
    Integer number with flags
    """

    infinite: bool | None = False
    """
    True if number has been set to infinite. "set" and "number" will be ignored.
    """
    number: int | None = None
    """
    If set is True the number will be set with value. Otherwise ignore number contents.
    """
    set: bool | None = False
    """
    True if number has been set. False if number is unset
    """


class Uint32NoVal(BaseModel):
    """
    Integer number with flags
    """

    infinite: bool | None = False
    """
    True if number has been set to infinite. "set" and "number" will be ignored.
    """
    number: int | None = None
    """
    If set is True the number will be set with value. Otherwise ignore number contents.
    """
    set: bool | None = False
    """
    True if number has been set. False if number is unset
    """


class Uint64NoVal(BaseModel):
    """
    Integer number with flags
    """

    infinite: bool | None = False
    """
    True if number has been set to infinite. "set" and "number" will be ignored.
    """
    number: int | None = None
    """
    If set is True the number will be set with value. Otherwise ignore number contents.
    """
    set: bool | None = False
    """
    True if number has been set. False if number is unset
    """


class StateEnum3(Enum):
    INVALID = "INVALID"
    UNKNOWN = "UNKNOWN"
    DOWN = "DOWN"
    IDLE = "IDLE"
    ALLOCATED = "ALLOCATED"
    ERROR = "ERROR"
    MIXED = "MIXED"
    FUTURE = "FUTURE"
    PERFCTRS = "PERFCTRS"
    RESERVED = "RESERVED"
    UNDRAIN = "UNDRAIN"
    CLOUD = "CLOUD"
    RESUME = "RESUME"
    DRAIN = "DRAIN"
    COMPLETING = "COMPLETING"
    NOT_RESPONDING = "NOT_RESPONDING"
    POWERED_DOWN = "POWERED_DOWN"
    FAIL = "FAIL"
    POWERING_UP = "POWERING_UP"
    MAINTENANCE = "MAINTENANCE"
    REBOOT_REQUESTED = "REBOOT_REQUESTED"
    REBOOT_CANCELED = "REBOOT_CANCELED"
    POWERING_DOWN = "POWERING_DOWN"
    DYNAMIC_FUTURE = "DYNAMIC_FUTURE"
    REBOOT_ISSUED = "REBOOT_ISSUED"
    PLANNED = "PLANNED"
    INVALID_REG = "INVALID_REG"
    POWER_DOWN = "POWER_DOWN"
    POWER_UP = "POWER_UP"
    POWER_DRAIN = "POWER_DRAIN"
    DYNAMIC_NORM = "DYNAMIC_NORM"


class UpdateNodeMsg(BaseModel):
    address: HostlistString | None = None
    """
    communication name
    """
    comment: str | None = None
    """
    arbitrary comment
    """
    cpu_bind: int | None = None
    """
    default CPU binding type
    """
    extra: str | None = None
    """
    arbitrary string
    """
    features: CsvString | None = None
    """
    new available feature for node
    """
    features_act: CsvString | None = None
    """
    new active feature for node
    """
    gres: str | None = None
    """
    new generic resources for node
    """
    hostname: HostlistString | None = None
    """
    node's hostname
    """
    name: HostlistString | None = None
    """
    node to update
    """
    reason: str | None = None
    """
    reason for node being DOWN or DRAINING
    """
    reason_uid: str | None = None
    """
    user ID of sending (needed if user root is sending message)
    """
    resume_after: Uint32NoVal | None = None
    """
    automatically resume DOWN or DRAINED node after this amount of seconds
    """
    state: list[StateEnum3] | None = None
    """
    assign new node state
    """
    weight: Uint32NoVal | None = None
    """
    new weight for node
    """


class AdministratorLevelEnum(Enum):
    Not_Set = "Not Set"
    None_ = "None"
    Operator = "Operator"
    Administrator = "Administrator"


class Default1(BaseModel):
    account: str | None = None
    wckey: str | None = None


class Flag11(Enum):
    NONE = "NONE"
    DELETED = "DELETED"


class AdminlevelEnum(Enum):
    Not_Set = "Not Set"
    None_ = "None"
    Operator = "Operator"
    Administrator = "Administrator"


class UserShort(BaseModel):
    adminlevel: list[AdminlevelEnum] | None = None
    """
    Admin level of user.  Valid levels are None, Operator, and Admin.
    """
    defaultaccount: str | None = None
    """
    Identify the default bank account name to be used for a job if none is specified at submission time.
    """
    defaultwckey: str | None = None
    """
    Identify the default Workload Characterization Key.
    """


class Flag12(Enum):
    DELETED = "DELETED"


class Flag13(Enum):
    ASSIGNED_DEFAULT = "ASSIGNED_DEFAULT"


class WckeyTagStruct(BaseModel):
    flags: list[Flag13]
    """
    Active flags
    """
    wckey: str
    """
    WCKey name
    """


class Account(BaseModel):
    associations: AssocShortList | None = None
    coordinators: CoordList | None = None
    description: str
    flags: list[Flag] | None = None
    name: str
    organization: str


class AccountList(BaseModel):
    __root__: list[Account]


class Accounting(BaseModel):
    TRES: Tres | None = None
    allocated: Allocated | None = None
    id: int | None = None
    start: int | None = None


class AccountingList(BaseModel):
    __root__: list[Accounting]


class AcctGatherEnergy(BaseModel):
    average_watts: int | None = None
    base_consumed_energy: int | None = None
    consumed_energy: int | None = None
    current_watts: Uint32NoVal | None = None
    last_collected: int | None = None
    previous_consumed_energy: int | None = None


class Per(BaseModel):
    accruing: Uint32NoVal | None = None
    count: Uint32NoVal | None = None
    submitted: Uint32NoVal | None = None
    wall_clock: Uint32NoVal | None = None


class Jobs(BaseModel):
    accruing: Uint32NoVal | None = None
    active: Uint32NoVal | None = None
    per: Per | None = None
    total: Uint32NoVal | None = None


class Account1(BaseModel):
    wall_clock: Uint32NoVal | None = None


class Per1(BaseModel):
    account: Account1 | None = None


class Group(BaseModel):
    active: TresList | None = None
    minutes: TresList | None = None


class Per2(BaseModel):
    job: TresList | None = None


class Minutes(BaseModel):
    per: Per2 | None = None
    total: TresList | None = None


class Per3(BaseModel):
    job: TresList | None = None
    node: TresList | None = None


class Tres1(BaseModel):
    group: Group | None = None
    minutes: Minutes | None = None
    per: Per3 | None = None
    total: TresList | None = None


class Max(BaseModel):
    jobs: Jobs | None = None
    per: Per1 | None = None
    tres: Tres1 | None = None


class Min(BaseModel):
    priority_threshold: Uint32NoVal | None = None


class Assoc(BaseModel):
    account: str | None = None
    accounting: AccountingList | None = None
    """
    Usage accounting
    """
    cluster: str | None = None
    comment: str | None = None
    """
    comment for the association
    """
    default: Default | None = None
    flags: list[Flag] | None = None
    id: AssocShort | None = None
    """
    Association ID
    """
    is_default: bool | None = None
    lineage: str | None = None
    """
    Complete path up the hierarchy to the root association
    """
    max: Max | None = None
    min: Min | None = None
    parent_account: str | None = None
    partition: str | None = None
    priority: Uint32NoVal | None = None
    qos: QosStringIdList | None = None
    """
    List of QOS names
    """
    shares_raw: int | None = None
    user: str


class AssocList(BaseModel):
    __root__: list[Assoc]


class AssocRecSet(BaseModel):
    comment: str | None = None
    """
    Comment for the association
    """
    defaultqos: str | None = None
    """
    Which QOS id is this association default
    """
    fairshare: int | None = None
    """
    Number of shares allocated to this association
    """
    grpjobs: Uint32NoVal | None = None
    """
    Max number of jobs the underlying group of associations can run at one time
    """
    grpjobsaccrue: Uint32NoVal | None = None
    """
    Max number of jobs the underlying group of associations can have accruing priority at one time
    """
    grpsubmitjobs: Uint32NoVal | None = None
    """
    Max number of jobs the underlying group of associations can submit at one time
    """
    grptres: TresList | None = None
    grptresmins: TresList | None = None
    """
    Max number of cpu minutes the underlying group of associations can run for
    """
    grptresrunmins: TresList | None = None
    """
    Max number of cpu minutes the underlying group of associations can having running at one time
    """
    grpwall: Uint32NoVal | None = None
    """
    Total time in minutes the underlying group of associations can run for
    """
    maxjobs: Uint32NoVal | None = None
    """
    Max number of jobs this association can run at one time
    """
    maxjobsaccrue: Uint32NoVal | None = None
    """
    Max number of jobs this association can have accruing priority time
    """
    maxsubmitjobs: Uint32NoVal | None = None
    """
    Max number of jobs that can be submitted by association
    """
    maxtresminsperjob: TresList | None = None
    """
    Max number of cpu minutes this association can have per job
    """
    maxtresperjob: TresList | None = None
    """
    Max number of cpus this association can allocate per job
    """
    maxtrespernode: TresList | None = None
    """
    Max number of TRES this association can allocate per node
    """
    maxtresrunmins: TresList | None = None
    """
    Max number of cpu minutes this association can having running at one time
    """
    maxwalldurationperjob: Uint32NoVal | None = None
    """
    Longest time this association can run a job
    """
    minpriothresh: Uint32NoVal | None = None
    """
    Don't reserve resources for pending jobs unless they have a priority equal to or higher than this
    """
    parent: str | None = None
    """
    Name of parent account
    """
    priority: Uint32NoVal | None = None
    """
    Association priority
    """
    qoslevel: QosStringIdList | None = None
    """
    List of QOS names
    """


class ClusterRec(BaseModel):
    associations: Associations | None = None
    controller: Controller | None = None
    flags: list[Flag2] | None = None
    name: str | None = None
    nodes: str | None = None
    rpc_version: int | None = None
    select_plugin: str | None = None
    tres: TresList | None = None


class ClusterRecList(BaseModel):
    __root__: list[ClusterRec]


class ExtSensorsData(BaseModel):
    consumed_energy: Uint64NoVal | None = None
    current_watts: int | None = None
    energy_update_time: int | None = None
    temperature: Uint32NoVal | None = None


class Array(BaseModel):
    job_id: int | None = None
    limits: Limits | None = None
    task: str | None = None
    task_id: Uint32NoVal | None = None


class Het(BaseModel):
    job_id: int | None = None
    job_offset: Uint32NoVal | None = None


class Required(BaseModel):
    CPUs: int | None = None
    memory_per_cpu: Uint64NoVal | None = None
    memory_per_node: Uint64NoVal | None = None


class Time1(BaseModel):
    elapsed: int | None = None
    eligible: int | None = None
    end: int | None = None
    limit: Uint32NoVal | None = None
    start: int | None = None
    submission: int | None = None
    suspended: int | None = None
    system: System | None = None
    total: Total | None = None
    user: User | None = None


class Tres3(BaseModel):
    allocated: TresList | None = None
    requested: TresList | None = None


class JobArrayResponseArray(BaseModel):
    __root__: list[JobArrayResponseMsgEntry]


class Rlimits(BaseModel):
    as_: Uint64NoVal | None = Field(None, alias="as")
    """
    Address space limit.
    """
    core: Uint64NoVal | None = None
    """
    Largest core file that can be created, in bytes.
    """
    cpu: Uint64NoVal | None = None
    """
    Per-process CPU limit, in seconds.
    """
    data: Uint64NoVal | None = None
    """
    Maximum size of data segment, in bytes.
    """
    fsize: Uint64NoVal | None = None
    """
    Largest file that can be created, in bytes.
    """
    memlock: Uint64NoVal | None = None
    """
    Locked-in-memory address space
    """
    nofile: Uint64NoVal | None = None
    """
    Number of open files.
    """
    nproc: Uint64NoVal | None = None
    """
    Number of processes.
    """
    rss: Uint64NoVal | None = None
    """
    Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.
    """
    stack: Uint64NoVal | None = None
    """
    Maximum size of stack segment, in bytes.
    """


class JobDescMsg(BaseModel):
    account: str | None = None
    account_gather_frequency: str | None = None
    admin_comment: str | None = None
    allocation_node_list: str | None = None
    allocation_node_port: int | None = None
    argv: StringArray | None = None
    array: str | None = None
    batch_features: str | None = None
    begin_time: Uint64NoVal | None = None
    burst_buffer: str | None = None
    cluster_constraint: str | None = None
    clusters: str | None = None
    comment: str | None = None
    constraints: str | None = None
    container: str | None = None
    container_id: str | None = None
    contiguous: bool | None = None
    core_specification: int | None = None
    cpu_binding: str | None = None
    cpu_binding_flags: list[CpuBindingFlag] | None = None
    cpu_frequency: str | None = None
    cpus_per_task: int | None = None
    cpus_per_tres: str | None = None
    crontab: CronEntry | None = None
    current_working_directory: str | None = None
    deadline: int | None = None
    delay_boot: int | None = None
    dependency: str | None = None
    distribution: str | None = None
    distribution_plane_size: int | None = None
    end_time: int | None = None
    environment: StringArray | None = None
    excluded_nodes: CsvString | None = None
    exclusive: list[ExclusiveEnum] | None = None
    extra: str | None = None
    flags: list[Flag5] | None = None
    group_id: str | None = None
    hetjob_group: int | None = None
    immediate: bool | None = None
    job_id: int | None = None
    kill_on_node_fail: bool | None = None
    kill_warning_delay: Uint16NoVal | None = None
    kill_warning_flags: list[KillWarningFlag] | None = None
    kill_warning_signal: str | None = None
    licenses: str | None = None
    mail_type: list[MailTypeEnum] | None = None
    mail_user: str | None = None
    maximum_cpus: int | None = None
    maximum_nodes: int | None = None
    mcs_label: str | None = None
    memory_binding: str | None = None
    memory_binding_type: list[MemoryBindingTypeEnum] | None = None
    memory_per_cpu: Uint64NoVal | None = None
    memory_per_node: Uint64NoVal | None = None
    memory_per_tres: str | None = None
    minimum_boards_per_node: int | None = None
    minimum_cpus: int | None = None
    minimum_cpus_per_node: int | None = None
    minimum_nodes: int | None = None
    minimum_sockets_per_board: int | None = None
    name: str | None = None
    network: str | None = None
    nice: int | None = None
    nodes: str | None = None
    ntasks_per_tres: int | None = None
    open_mode: list[OpenModeEnum] | None = None
    overcommit: bool | None = None
    oversubscribe: bool | None = None
    partition: str | None = None
    power_flags: list[PowerFlag] | None = None
    prefer: str | None = None
    priority: Uint32NoVal | None = None
    profile: list[ProfileEnum] | None = None
    qos: str | None = None
    reboot: bool | None = None
    requeue: bool | None = None
    required_nodes: CsvString | None = None
    required_switches: Uint32NoVal | None = None
    reservation: str | None = None
    reserve_ports: int | None = None
    rlimits: Rlimits | None = None
    script: str | None = None
    selinux_context: str | None = None
    shared: list[SharedEnum] | None = None
    site_factor: int | None = None
    sockets_per_node: int | None = None
    spank_environment: StringArray | None = None
    standard_error: str | None = None
    standard_input: str | None = None
    standard_output: str | None = None
    tasks: int | None = None
    tasks_per_board: int | None = None
    tasks_per_core: int | None = None
    tasks_per_node: int | None = None
    tasks_per_socket: int | None = None
    temporary_disk_per_node: int | None = None
    thread_specification: int | None = None
    threads_per_core: int | None = None
    time_limit: Uint32NoVal | None = None
    time_minimum: Uint32NoVal | None = None
    tres_bind: str | None = None
    tres_freq: str | None = None
    tres_per_job: str | None = None
    tres_per_node: str | None = None
    tres_per_socket: str | None = None
    tres_per_task: str | None = None
    user_id: str | None = None
    wait_all_nodes: bool | None = None
    wait_for_switch: int | None = None
    wckey: str | None = None
    x11: list[X11Enum] | None = None
    x11_magic_cookie: str | None = None
    x11_target_host: str | None = None
    x11_target_port: int | None = None


class JobDescMsgList(BaseModel):
    __root__: list[JobDescMsg]


class JobRes(BaseModel):
    allocated_cores: int | None = None
    allocated_cpus: int | None = None
    allocated_hosts: int | None = None
    allocated_nodes: JobResNodes | None = None
    nodes: str | None = None


class JobSubmitReq(BaseModel):
    job: JobDescMsg | None = None
    """
    Job description
    """
    jobs: JobDescMsgList | None = None
    """
    HetJob description
    """
    script: str | None = None
    """
    batch job script
    """


class OpenapiMeta(BaseModel):
    client: Client | None = None
    command: StringArray | None = None
    """
    CLI command (if applicable)
    """
    plugin: Plugin | None = None
    slurm: Slurm | None = None


class OpenapiPingArrayResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    pings: ControllerPingArray
    """
    pings
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiSlurmdbdQosRemovedResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    removed_qos: StringList
    """
    removed QOS
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiTresResp(BaseModel):
    TRES: TresList
    """
    TRES
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiUsersAddCondRespStr(BaseModel):
    added_users: str
    """
    added_users
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiWckeyRemovedResp(BaseModel):
    deleted_wckeys: StringList
    """
    deleted wckeys
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class Defaults(BaseModel):
    job: str | None = None
    memory_per_cpu: int | None = None
    partition_memory_per_cpu: Uint64NoVal | None = None
    partition_memory_per_node: Uint64NoVal | None = None
    time: Uint32NoVal | None = None


class Maximums(BaseModel):
    cpus_per_node: Uint32NoVal | None = None
    cpus_per_socket: Uint32NoVal | None = None
    memory_per_cpu: int | None = None
    nodes: Uint32NoVal | None = None
    over_time_limit: Uint16NoVal | None = None
    oversubscribe: Oversubscribe | None = None
    partition_memory_per_cpu: Uint64NoVal | None = None
    partition_memory_per_node: Uint64NoVal | None = None
    shares: int | None = None
    time: Uint32NoVal | None = None


class Timeouts(BaseModel):
    resume: Uint16NoVal | None = None
    suspend: Uint16NoVal | None = None


class PartitionInfo(BaseModel):
    accounts: Accounts | None = None
    alternate: str | None = None
    cluster: str | None = None
    cpus: Cpus | None = None
    defaults: Defaults | None = None
    grace_time: int | None = None
    groups: Groups | None = None
    maximums: Maximums | None = None
    minimums: Minimums | None = None
    name: str | None = None
    node_sets: str | None = None
    nodes: Nodes1 | None = None
    partition: Partition | None = None
    priority: Priority | None = None
    qos: Qos | None = None
    suspend_time: Uint32NoVal | None = None
    timeouts: Timeouts | None = None
    tres: Tres4 | None = None


class PartitionInfoMsg(BaseModel):
    __root__: list[PartitionInfo]


class PowerMgmtData(BaseModel):
    current_watts: int | None = None
    lowest_watts: int | None = None
    maximum_watts: Uint32NoVal | None = None
    new_job_time: Uint64NoVal | None = None
    new_maximum_watts: int | None = None
    peak_watts: int | None = None
    state: int | None = None
    time_start_day: int | None = None
    total_energy: int | None = None


class Signal(BaseModel):
    id: Uint16NoVal | None = None
    """
    Signal sent to process (numeric)
    """
    name: str | None = None
    """
    Signal sent to process
    """


class ProcessExitCodeVerbose(BaseModel):
    return_code: Uint32NoVal | None = None
    """
    Process return code (numeric)
    """
    signal: Signal | None = None
    status: list[StatusEnum] | None = None
    """
    Status given by return code
    """


class Per4(BaseModel):
    account: Uint32NoVal | None = None
    user: Uint32NoVal | None = None


class Accruing(BaseModel):
    per: Per4 | None = None


class ActiveJobs(BaseModel):
    accruing: Uint32NoVal | None = None
    count: Uint32NoVal | None = None


class ActiveJobs1(BaseModel):
    per: Per4 | None = None


class Jobs1(BaseModel):
    active_jobs: ActiveJobs1 | None = None
    per: Per4 | None = None


class Per7(BaseModel):
    account: TresList | None = None
    job: TresList | None = None
    qos: TresList | None = None
    user: TresList | None = None


class Minutes1(BaseModel):
    per: Per7 | None = None


class Per8(BaseModel):
    account: TresList | None = None
    job: TresList | None = None
    node: TresList | None = None
    user: TresList | None = None


class Tres5(BaseModel):
    minutes: Minutes1 | None = None
    per: Per8 | None = None
    total: TresList | None = None


class Per9(BaseModel):
    job: Uint32NoVal | None = None
    qos: Uint32NoVal | None = None


class WallClock(BaseModel):
    per: Per9 | None = None


class Max2(BaseModel):
    accruing: Accruing | None = None
    active_jobs: ActiveJobs | None = None
    jobs: Jobs1 | None = None
    tres: Tres5 | None = None
    wall_clock: WallClock | None = None


class Per10(BaseModel):
    job: TresList | None = None


class Tres6(BaseModel):
    per: Per10 | None = None


class Min1(BaseModel):
    priority_threshold: Uint32NoVal | None = None
    tres: Tres6 | None = None


class Limits1(BaseModel):
    factor: Float64NoVal | None = None
    grace_time: int | None = None
    max: Max2 | None = None
    min: Min1 | None = None


class Preempt(BaseModel):
    exempt_time: Uint32NoVal | None = None
    list: QosPreemptList | None = None
    mode: List[ModeEnum] | None = None  # resolve name clash with list attribute


class Qos1(BaseModel):
    description: str | None = None
    flags: list[Flag9] | None = None
    id: int | None = None
    limits: Limits1 | None = None
    name: str | None = None
    preempt: Preempt | None = None
    priority: Uint32NoVal | None = None
    usage_factor: Float64NoVal | None = None
    usage_threshold: Float64NoVal | None = None


class QosList(BaseModel):
    __root__: list[Qos1]


class PurgeCompleted(BaseModel):
    time: Uint32NoVal | None = None


class ReservationInfo(BaseModel):
    accounts: str | None = None
    burst_buffer: str | None = None
    core_count: int | None = None
    core_specializations: ReservationInfoCoreSpec | None = None
    end_time: Uint64NoVal | None = None
    features: str | None = None
    flags: list[Flag10] | None = None
    groups: str | None = None
    licenses: str | None = None
    max_start_delay: int | None = None
    name: str | None = None
    node_count: int | None = None
    node_list: str | None = None
    partition: str | None = None
    purge_completed: PurgeCompleted | None = None
    start_time: Uint64NoVal | None = None
    tres: str | None = None
    users: str | None = None
    watts: Uint32NoVal | None = None


class ReservationInfoMsg(BaseModel):
    __root__: list[ReservationInfo]


class SharesUint64Tres(BaseModel):
    name: str | None = None
    """
    TRES name
    """
    value: Uint64NoVal | None = None
    """
    TRES value
    """


class SharesUint64TresList(BaseModel):
    __root__: list[SharesUint64Tres]


class StatsMsg(BaseModel):
    agent_count: int | None = None
    agent_queue_size: int | None = None
    agent_thread_count: int | None = None
    bf_active: bool | None = None
    bf_backfilled_het_jobs: int | None = None
    bf_backfilled_jobs: int | None = None
    bf_cycle_counter: int | None = None
    bf_cycle_last: int | None = None
    bf_cycle_mean: int | None = None
    bf_cycle_sum: int | None = None
    bf_depth_mean: int | None = None
    bf_depth_mean_try: int | None = None
    bf_depth_sum: int | None = None
    bf_depth_try_sum: int | None = None
    bf_exit: BfExitFields | None = None
    bf_last_backfilled_jobs: int | None = None
    bf_last_depth: int | None = None
    bf_last_depth_try: int | None = None
    bf_queue_len: int | None = None
    bf_queue_len_mean: int | None = None
    bf_queue_len_sum: int | None = None
    bf_table_size: int | None = None
    bf_table_size_mean: int | None = None
    bf_when_last_cycle: Uint64NoVal | None = None
    dbd_agent_queue_size: int | None = None
    gettimeofday_latency: int | None = None
    job_states_ts: Uint64NoVal | None = None
    jobs_canceled: int | None = None
    jobs_completed: int | None = None
    jobs_failed: int | None = None
    jobs_pending: int | None = None
    jobs_running: int | None = None
    jobs_started: int | None = None
    jobs_submitted: int | None = None
    parts_packed: int | None = None
    req_time: Uint64NoVal | None = None
    req_time_start: Uint64NoVal | None = None
    rpcs_by_message_type: StatsMsgRpcsByType | None = None
    rpcs_by_user: StatsMsgRpcsByUser | None = None
    schedule_cycle_last: int | None = None
    schedule_cycle_max: int | None = None
    schedule_cycle_mean: int | None = None
    schedule_cycle_mean_depth: int | None = None
    schedule_cycle_per_minute: int | None = None
    schedule_cycle_total: int | None = None
    schedule_exit: ScheduleExitFields | None = None
    schedule_queue_length: int | None = None
    server_thread_count: int | None = None


class StatsRec(BaseModel):
    RPCs: StatsRpcList | None = None
    rollups: RollupStats | None = None
    time_start: int | None = None
    users: StatsUserList | None = None


class RequestedFrequency(BaseModel):
    max: Uint32NoVal | None = None
    min: Uint32NoVal | None = None


class CPU(BaseModel):
    governor: str | None = None
    requested_frequency: RequestedFrequency | None = None


class Energy(BaseModel):
    consumed: Uint64NoVal | None = None


class Statistics(BaseModel):
    CPU: CPU1 | None = None
    energy: Energy | None = None


class Time4(BaseModel):
    elapsed: int | None = None
    end: Uint64NoVal | None = None
    start: Uint64NoVal | None = None
    suspended: int | None = None
    system: System | None = None
    total: Total | None = None
    user: User | None = None


class StepTresReqMax(BaseModel):
    __root__: list[Tres]


class StepTresReqMin(BaseModel):
    __root__: list[Tres]


class StepTresUsageMax(BaseModel):
    __root__: list[Tres]


class StepTresUsageMin(BaseModel):
    __root__: list[Tres]


class UsersAddCond(BaseModel):
    accounts: StringList | None = None
    """
    CSV accounts list
    """
    association: AssocRecSet | None = None
    """
    Association limits and options
    """
    clusters: StringList | None = None
    """
    CSV clusters list
    """
    partitions: StringList | None = None
    """
    CSV partitions list
    """
    users: StringList
    """
    CSV users list
    """
    wckeys: StringList | None = None
    """
    CSV WCKeys list
    """


class Wckey(BaseModel):
    accounting: AccountingList | None = None
    cluster: str
    flags: list[Flag12] | None = None
    id: int | None = None
    name: str
    user: str


class WckeyList(BaseModel):
    __root__: list[Wckey]


class AccountsAddCond(BaseModel):
    accounts: StringList
    """
    CSV accounts list
    """
    association: AssocRecSet | None = None
    """
    Association limits and options
    """
    clusters: StringList | None = None
    """
    CSV clusters list
    """


class Tres2(BaseModel):
    group_minutes: SharesUint64TresList | None = None
    """
    tres-minute limit
    """
    run_seconds: SharesUint64TresList | None = None
    """
    currently running tres-secs = grp_used_tres_run_secs
    """
    usage: SharesFloat128TresList | None = None
    """
    measure of each tres usage
    """


class AssocSharesObjWrap(BaseModel):
    cluster: str | None = None
    """
    cluster name
    """
    effective_usage: float | None = None
    """
    effective, normalized usage
    """
    fairshare: Fairshare | None = None
    id: int | None = None
    """
    assocation id
    """
    name: str | None = None
    """
    share name
    """
    parent: str | None = None
    """
    parent name
    """
    partition: str | None = None
    """
    partition name
    """
    shares: Uint32NoVal | None = None
    """
    number of shares allocated
    """
    shares_normalized: Float64NoVal | None = None
    """
    normalized shares
    """
    tres: Tres2 | None = None
    type: list[TypeEnum] | None = None
    """
    user or account association
    """
    usage: int | None = None
    """
    measure of tresbillableunits usage
    """
    usage_normalized: Float64NoVal | None = None
    """
    normalized usage
    """


class JobInfo(BaseModel):
    account: str | None = None
    accrue_time: Uint64NoVal | None = None
    admin_comment: str | None = None
    allocating_node: str | None = None
    array_job_id: Uint32NoVal | None = None
    array_max_tasks: Uint32NoVal | None = None
    array_task_id: Uint32NoVal | None = None
    array_task_string: str | None = None
    association_id: int | None = None
    batch_features: str | None = None
    batch_flag: bool | None = None
    batch_host: str | None = None
    billable_tres: Float64NoVal | None = None
    burst_buffer: str | None = None
    burst_buffer_state: str | None = None
    cluster: str | None = None
    cluster_features: str | None = None
    command: str | None = None
    comment: str | None = None
    container: str | None = None
    container_id: str | None = None
    contiguous: bool | None = None
    core_spec: int | None = None
    cores_per_socket: Uint16NoVal | None = None
    cpu_frequency_governor: Uint32NoVal | None = None
    cpu_frequency_maximum: Uint32NoVal | None = None
    cpu_frequency_minimum: Uint32NoVal | None = None
    cpus: Uint32NoVal | None = None
    cpus_per_task: Uint16NoVal | None = None
    cpus_per_tres: str | None = None
    cron: str | None = None
    current_working_directory: str | None = None
    deadline: Uint64NoVal | None = None
    delay_boot: Uint32NoVal | None = None
    dependency: str | None = None
    derived_exit_code: ProcessExitCodeVerbose | None = None
    """
    return code returned by process
    """
    eligible_time: Uint64NoVal | None = None
    end_time: Uint64NoVal | None = None
    excluded_nodes: str | None = None
    exclusive: list[ExclusiveEnum] | None = None
    exit_code: ProcessExitCodeVerbose | None = None
    """
    return code returned by process
    """
    extra: str | None = None
    failed_node: str | None = None
    features: str | None = None
    federation_origin: str | None = None
    federation_siblings_active: str | None = None
    federation_siblings_viable: str | None = None
    flags: list[Flag5] | None = None
    gres_detail: JobInfoGresDetail | None = None
    group_id: int | None = None
    group_name: str | None = None
    het_job_id: Uint32NoVal | None = None
    het_job_id_set: str | None = None
    het_job_offset: Uint32NoVal | None = None
    job_id: int | None = None
    job_resources: JobRes | None = None
    job_size_str: CsvString | None = None
    job_state: list[JobStateEnum] | None = None
    last_sched_evaluation: Uint64NoVal | None = None
    licenses: str | None = None
    mail_type: list[MailTypeEnum] | None = None
    mail_user: str | None = None
    max_cpus: Uint32NoVal | None = None
    max_nodes: Uint32NoVal | None = None
    maximum_switch_wait_time: int | None = None
    mcs_label: str | None = None
    memory_per_cpu: Uint64NoVal | None = None
    memory_per_node: Uint64NoVal | None = None
    memory_per_tres: str | None = None
    minimum_cpus_per_node: Uint16NoVal | None = None
    minimum_switches: int | None = None
    minimum_tmp_disk_per_node: Uint32NoVal | None = None
    name: str | None = None
    network: str | None = None
    nice: int | None = None
    node_count: Uint32NoVal | None = None
    nodes: str | None = None
    oversubscribe: bool | None = None
    partition: str | None = None
    power: Power | None = None
    pre_sus_time: Uint64NoVal | None = None
    preempt_time: Uint64NoVal | None = None
    preemptable_time: Uint64NoVal | None = None
    prefer: str | None = None
    priority: Uint32NoVal | None = None
    profile: list[ProfileEnum] | None = None
    qos: str | None = None
    reboot: bool | None = None
    requeue: bool | None = None
    required_nodes: str | None = None
    resize_time: Uint64NoVal | None = None
    restart_cnt: int | None = None
    resv_name: str | None = None
    scheduled_nodes: str | None = None
    selinux_context: str | None = None
    shared: list[SharedEnum] | None = None
    show_flags: list[ShowFlag] | None = None
    sockets_per_board: int | None = None
    sockets_per_node: Uint16NoVal | None = None
    standard_error: str | None = None
    standard_input: str | None = None
    standard_output: str | None = None
    start_time: Uint64NoVal | None = None
    state_description: str | None = None
    state_reason: str | None = None
    submit_time: Uint64NoVal | None = None
    suspend_time: Uint64NoVal | None = None
    system_comment: str | None = None
    tasks: Uint32NoVal | None = None
    tasks_per_board: Uint16NoVal | None = None
    tasks_per_core: Uint16NoVal | None = None
    tasks_per_node: Uint16NoVal | None = None
    tasks_per_socket: Uint16NoVal | None = None
    tasks_per_tres: Uint16NoVal | None = None
    thread_spec: int | None = None
    threads_per_core: Uint16NoVal | None = None
    time_limit: Uint32NoVal | None = None
    time_minimum: Uint32NoVal | None = None
    tres_alloc_str: str | None = None
    tres_bind: str | None = None
    tres_freq: str | None = None
    tres_per_job: str | None = None
    tres_per_node: str | None = None
    tres_per_socket: str | None = None
    tres_per_task: str | None = None
    tres_req_str: str | None = None
    user_id: int | None = None
    user_name: str | None = None
    wckey: str | None = None


class JobInfoMsg(BaseModel):
    __root__: list[JobInfo]


class Node(BaseModel):
    active_features: CsvString | None = None
    address: str | None = None
    alloc_cpus: int | None = None
    alloc_idle_cpus: int | None = None
    alloc_memory: int | None = None
    architecture: str | None = None
    boards: int | None = None
    boot_time: Uint64NoVal | None = None
    burstbuffer_network_address: str | None = None
    cluster_name: str | None = None
    comment: str | None = None
    cores: int | None = None
    cpu_binding: int | None = None
    cpu_load: int | None = None
    cpus: int | None = None
    effective_cpus: int | None = None
    energy: AcctGatherEnergy | None = None
    external_sensors: ExtSensorsData | None = None
    extra: str | None = None
    features: CsvString | None = None
    free_mem: Uint64NoVal | None = None
    gres: str | None = None
    gres_drained: str | None = None
    gres_used: str | None = None
    hostname: str | None = None
    instance_id: str | None = None
    instance_type: str | None = None
    last_busy: Uint64NoVal | None = None
    mcs_label: str | None = None
    name: str | None = None
    next_state_after_reboot: list[NextStateAfterRebootEnum] | None = None
    operating_system: str | None = None
    owner: str | None = None
    partitions: CsvString | None = None
    port: int | None = None
    power: PowerMgmtData | None = None
    real_memory: int | None = None
    reason: str | None = None
    reason_changed_at: Uint64NoVal | None = None
    reason_set_by_user: str | None = None
    reservation: str | None = None
    resume_after: Uint64NoVal | None = None
    slurmd_start_time: Uint64NoVal | None = None
    sockets: int | None = None
    specialized_cores: int | None = None
    specialized_cpus: str | None = None
    specialized_memory: int | None = None
    state: list[StateEnum] | None = None
    temporary_disk: int | None = None
    threads: int | None = None
    tres: str | None = None
    tres_used: str | None = None
    tres_weighted: float | None = None
    version: str | None = None
    weight: int | None = None


class Nodes(BaseModel):
    __root__: list[Node]


class OpenapiAccountsAddCondResp(BaseModel):
    account: AccountShort | None = None
    """
    Account organization and description
    """
    association_condition: AccountsAddCond | None = None
    """
    CSV list of accounts, association limits and options, CSV list of clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAccountsAddCondRespStr(BaseModel):
    added_accounts: str
    """
    added_accounts
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAccountsRemovedResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    removed_accounts: StringList
    """
    removed_accounts
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAccountsResp(BaseModel):
    accounts: AccountList
    """
    accounts
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAssocsRemovedResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    removed_associations: StringList
    """
    removed_associations
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiAssocsResp(BaseModel):
    associations: AssocList
    """
    associations
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiClustersRemovedResp(BaseModel):
    deleted_clusters: StringList
    """
    deleted_clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiClustersResp(BaseModel):
    clusters: ClusterRecList
    """
    clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiDiagResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    statistics: StatsMsg
    """
    statistics
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiInstancesResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    instances: InstanceList
    """
    instances
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiJobInfoResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    jobs: JobInfoMsg
    """
    list of jobs
    """
    last_backfill: Uint64NoVal
    """
    time of last backfill scheduler run (UNIX timestamp)
    """
    last_update: Uint64NoVal
    """
    time of last job change (UNIX timestamp)
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiJobPostResponse(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    job_id: str | None = None
    """
    First updated JobId - Use results instead
    """
    job_submit_user_msg: str | None = None
    """
    First updated Job submision user message - Use results instead
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    results: JobArrayResponseArray | None = None
    """
    Job update results
    """
    step_id: str | None = None
    """
    First updated StepID - Use results instead
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiJobSubmitResponse(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    job_id: int | None = None
    """
    submited JobId
    """
    job_submit_user_msg: str | None = None
    """
    job submision user message
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    result: JobSubmitResponseMsg | None = None
    """
    Job submission
    """
    step_id: str | None = None
    """
    submited StepID
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiLicensesResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    last_update: Uint64NoVal
    """
    time of last licenses change (UNIX timestamp)
    """
    licenses: Licenses
    """
    list of licenses
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiNodesResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    last_update: Uint64NoVal
    """
    time of last node change (UNIX timestamp)
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    nodes: Nodes
    """
    list of nodes
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiPartitionResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    last_update: Uint64NoVal
    """
    time of last partition change (UNIX timestamp)
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    partitions: PartitionInfoMsg
    """
    list of partitions
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiReservationResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    last_update: Uint64NoVal
    """
    time of last reservation change (UNIX timestamp)
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    reservations: ReservationInfoMsg
    """
    list of reservations
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiSlurmdbdQosResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    qos: QosList
    """
    List of QOS
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiSlurmdbdStatsResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    statistics: StatsRec
    """
    statistics
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiUsersAddCondResp(BaseModel):
    association_condition: UsersAddCond | None = None
    """
    Filters to select associations for users
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    user: UserShort | None = None
    """
    Admin level of user, DefaultAccount, DefaultWCKey
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiWckeyResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """
    wckeys: WckeyList
    """
    wckeys
    """


class Consumed(BaseModel):
    average: TresList | None = None
    max: StepTresUsageMax | None = None
    min: StepTresUsageMin | None = None
    total: TresList | None = None


class Requested(BaseModel):
    average: TresList | None = None
    max: StepTresReqMax | None = None
    min: StepTresReqMin | None = None
    total: TresList | None = None


class Tres7(BaseModel):
    allocated: TresList | None = None
    consumed: Consumed | None = None
    requested: Requested | None = None


class Step(BaseModel):
    CPU: CPU | None = None
    exit_code: ProcessExitCodeVerbose | None = None
    """
    return code returned by process
    """
    kill_request_user: str | None = None
    nodes: Nodes2 | None = None
    pid: str | None = None
    state: list[StateEnum2] | None = None
    statistics: Statistics | None = None
    step: Step1 | None = None
    task: Task | None = None
    tasks: Tasks | None = None
    time: Time4 | None = None
    tres: Tres7 | None = None


class StepList(BaseModel):
    __root__: list[Step]


class User2(BaseModel):
    administrator_level: list[AdministratorLevelEnum] | None = None
    associations: AssocShortList | None = None
    coordinators: CoordList | None = None
    default: Default1 | None = None
    flags: list[Flag11] | None = None
    name: str
    old_name: str | None = None
    wckeys: WckeyList | None = None


class UserList(BaseModel):
    __root__: list[User2]


class AssocSharesObjList(BaseModel):
    __root__: list[AssocSharesObjWrap]


class Job(BaseModel):
    account: str | None = None
    allocation_nodes: int | None = None
    array: Array | None = None
    association: AssocShort | None = None
    block: str | None = None
    cluster: str | None = None
    comment: Comment | None = None
    constraints: str | None = None
    container: str | None = None
    derived_exit_code: ProcessExitCodeVerbose | None = None
    """
    return code returned by process
    """
    exit_code: ProcessExitCodeVerbose | None = None
    """
    return code returned by process
    """
    extra: str | None = None
    failed_node: str | None = None
    flags: list[Flag4] | None = None
    group: str | None = None
    het: Het | None = None
    job_id: int | None = None
    kill_request_user: str | None = None
    licenses: str | None = None
    mcs: Mcs | None = None
    name: str | None = None
    nodes: str | None = None
    partition: str | None = None
    priority: Uint32NoVal | None = None
    qos: str | None = None
    required: Required | None = None
    reservation: Reservation | None = None
    script: str | None = None
    state: State | None = None
    steps: StepList | None = None
    submit_line: str | None = None
    time: Time1 | None = None
    tres: Tres3 | None = None
    used_gres: str | None = None
    user: str | None = None
    wckey: WckeyTagStruct | None = None
    """
    WCKey ID with tagging
    """
    working_directory: str | None = None


class JobList(BaseModel):
    __root__: list[Job]


class OpenapiSlurmdbdConfigResp(BaseModel):
    accounts: AccountList | None = None
    """
    accounts
    """
    associations: AssocList | None = None
    """
    associations
    """
    clusters: ClusterRecList | None = None
    """
    clusters
    """
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    instances: InstanceList | None = None
    """
    instances
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    qos: QosList | None = None
    """
    qos
    """
    tres: TresList | None = None
    """
    tres
    """
    users: UserList | None = None
    """
    users
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """
    wckeys: WckeyList | None = None
    """
    wckeys
    """


class OpenapiSlurmdbdJobsResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    jobs: JobList
    """
    jobs
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class OpenapiUsersResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    users: UserList
    """
    users
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """


class SharesRespMsg(BaseModel):
    shares: AssocSharesObjList | None = None
    """
    Assocation shares
    """
    total_shares: int | None = None
    """
    Total number of shares
    """


class OpenapiSharesResp(BaseModel):
    errors: OpenapiErrors | None = None
    """
    Query errors
    """
    meta: OpenapiMeta | None = None
    """
    Slurm meta values
    """
    shares: SharesRespMsg
    """
    fairshare info
    """
    warnings: OpenapiWarnings | None = None
    """
    Query warnings
    """
